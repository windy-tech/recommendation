http://localhost:8080/books

###

POST http://192.168.98.8:8088/books HTTP/1.1
content-type: application/json

{
    "name": "sample-book2",
    "content":"# Go Todo REST API Example\nA RESTful API example for simple todo application with Go\n\nIt is a just simple tutorial or example for making simple RESTful API with Go using **gorilla/mux** (A nice mux library) and **gorm** (An ORM for Go)\n\n## Installation & Run\n```bash\n# Download this project\ngo get github.com/mingrammer/go-todo-rest-api-example\n```\n\nBefore running API server, you should set the database config with yours or set the your database config with my values on [config.go](https://github.com/mingrammer/go-todo-rest-api-example/blob/master/config/config.go)\n```go\nfunc GetConfig() *Config {\n	return &Config{\n		DB: &DBConfig{\n			Dialect:  "mysql",\n			Username: "guest",\n			Password: "Guest0000!",\n			Name:     "todoapp",\n			Charset:  "utf8",\n		},\n	}\n}\n```\n\n```bash\n# Build and Run\ncd go-todo-rest-api-example\ngo build\n./go-todo-rest-api-example\n\n# API Endpoint : http://127.0.0.1:3000\n```\n\n## Structure\n```\n├── app\n│   ├── app.go\n│   ├── handler          // Our API core handlers\n│   │   ├── common.go    // Common response functions\n│   │   ├── projects.go  // APIs for Project model\n│   │   └── tasks.go     // APIs for Task model\n│   └── model\n│       └── model.go     // Models for our application\n├── config\n│   └── config.go        // Configuration\n└── main.go\n```\n\n## API\n\n#### /projects\n* `GET` : Get all projects\n* `POST` : Create a new project\n\n#### /projects/:title\n* `GET` : Get a project\n* `PUT` : Update a project\n* `DELETE` : Delete a project\n\n#### /projects/:title/archive\n* `PUT` : Archive a project\n* `DELETE` : Restore a project \n\n#### /projects/:title/tasks\n* `GET` : Get all tasks of a project\n* `POST` : Create a new task in a project\n\n#### /projects/:title/tasks/:id\n* `GET` : Get a task of a project\n* `PUT` : Update a task of a project\n* `DELETE` : Delete a task of a project\n\n#### /projects/:title/tasks/:id/complete\n* `PUT` : Complete a task of a project\n* `DELETE` : Undo a task of a project\n\n## Todo\n\n- [x] Support basic REST APIs.\n- [ ] Support Authentication with user for securing the APIs.\n- [ ] Make convenient wrappers for creating API handlers.\n- [ ] Write the tests for all APIs.\n- [x] Organize the code with packages\n- [ ] Make docs with GoDoc\n- [ ] Building a deployment process "
}